// Prisma schema for English 1-1 MVP

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum BookingType {
  TRIAL
  PAID
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  passwordHash  String?
  role          UserRole @default(STUDENT)
  timezone      String   @default("Asia/Ho_Chi_Minh")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  teacherProfile    TeacherProfile?
  bookingsAsStudent Booking[] @relation("studentBookings")
  bookingsAsTeacher Booking[] @relation("teacherBookings")
  packageItems      PackageItem[]

  @@map("users")
}

model TeacherProfile {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @unique
  bio           String?
  ratePer25     Int
  languages     String[] @default([])
  accents       String[] @default([])
  skills        String[] @default([])
  rating        Float?   @default(5)
  introVideoUrl String?
  photoUrl      String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  availability  AvailabilitySlot[]

  @@map("teacher_profiles")
}

model AvailabilitySlot {
  id          String         @id @default(cuid())
  teacher     TeacherProfile @relation(fields: [teacherId], references: [id])
  teacherId   String
  startUtc    DateTime
  endUtc      DateTime
  isRecurring Boolean        @default(false)
  weekday     Int?
  createdAt   DateTime       @default(now())

  @@index([teacherId, startUtc])
  @@map("availability_slots")
}

model Booking {
  id           String        @id @default(cuid())
  type         BookingType   @default(TRIAL)
  status       BookingStatus @default(CONFIRMED)

  teacher      User          @relation("teacherBookings", fields: [teacherId], references: [id])
  teacherId    String

  student      User          @relation("studentBookings", fields: [studentId], references: [id])
  studentId    String

  startUtc     DateTime
  endUtc       DateTime
  notes        String?

  packageItem   PackageItem?  @relation(fields: [packageItemId], references: [id])
  packageItemId String?

  // Opposite sides
  review    Review?
  payments  Payment[]

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@unique([teacherId, startUtc], name: "oneBookingPerTeacherPerStart")
  @@index([studentId, startUtc])
  @@map("bookings")
}

model Package {
  id               String   @id @default(cuid())
  name             String
  minutesPerLesson Int
  lessons          Int
  priceVnd         Int
  isActive         Boolean  @default(true)
  description      String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  items     PackageItem[]
  payments  Payment[]

  @@map("packages")
}

model PackageItem {
  id               String   @id @default(cuid())
  package          Package  @relation(fields: [packageId], references: [id])
  packageId        String

  student          User     @relation(fields: [studentId], references: [id])
  studentId        String

  remainingLessons Int
  expiresAt        DateTime?
  bookings         Booking[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([studentId])
  @@map("package_items")
}

model Payment {
  id             String        @id @default(cuid())
  amountVnd      Int
  status         PaymentStatus @default(PENDING)
  method         String

  booking        Booking?      @relation(fields: [bookingId], references: [id])
  bookingId      String?

  package        Package?      @relation(fields: [packageId], references: [id])
  packageId      String?

  transactionRef String?
  createdAt      DateTime      @default(now())

  @@map("payments")
}

model Review {
  id        String  @id @default(cuid())

  booking   Booking @relation(fields: [bookingId], references: [id])
  bookingId String  @unique

  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  @@map("reviews")
}

model Lead {
  id         String  @id @default(cuid())
  email      String
  name       String?
  source     String?
  quizResult Json?
  createdAt  DateTime @default(now())

  @@index([email])
  @@map("leads")
}
